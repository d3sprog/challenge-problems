@online{airtable,
title = {The fastest way to build apps},
author = {Airtable},
url = {https://airtable.com},
urldate = {June 2023},
year = {2023}
}

@online{AlterTable,
title={ALTER TABLE, SQL Language Reference},
url={https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/ALTER-TABLE.html#GUID-552E7373-BF93-477D-9DA3-B2C9386F2877},
author={Oracle Inc.},
year={2021},
urldate={Feb 2021}
}

@book{ambler06,
  title={Refactoring Databases: Evolutionary Database Design},
  author={Ambler, S.W. and Sadalage, P.J.},
  isbn={9780321293534},
  lccn={2005031959},
  year={2006},
  publisher={Addison Wesley},
  address = {USA}
}

@article{Banerjee87,
  author     = {Banerjee, Jay and Kim, Won and Kim, Hyoung-Joo and Korth, Henry F.},
  title      = {Semantics and Implementation of Schema Evolution in Object-Oriented Databases},
  year       = {1987},
  issue_date = {Dec. 1987},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {16},
  number     = {3},
  issn       = {0163-5808},
  url        = {https://doi.org/10.1145/38714.38748},
  doi        = {10.1145/38714.38748},
  journal    = {SIGMOD Rec.},
  month      = dec,
  pages      = {311–322},
  numpages   = {12}
}

@book{Barstow1984,
  title={Interactive Programming Environments},
  author={Barstow, D.R. and Guty, S.G. and Shrobe, H.E. and Sandewall, E.},
  isbn={9780070038851},
  lccn={83013572},
  series={McGraw-Hill computer science series},
  year={1984},
  publisher={McGraw-Hill},
  address = {USA}
}

@inproceedings{Basman19,
  author    = {Antranig Basman},
  editor    = {Mariana Marasoiu and Luke Church and Lindsay Marshall},
  title     = {The Naturalist's Friend - {A} case study and blueprint for pluralist data tools and infrastructure},
  booktitle = {Proceedings of the 30th Annual Workshop of the Psychology of Programming Interest Group, {PPIG} 2019, Newcastle University, UK, August 28 - 30, 2019},
  publisher = {Psychology of Programming Interest Group},
  month     = aug,
  year      = {2019},
  url       = {https://ppig.org/papers/2019-ppig-30th-basman/},
  timestamp = {Thu, 19 May 2022 16:52:59 +0200},
  biburl    = {https://dblp.org/rec/conf/ppig/Basman19.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@online{Bracha.history,
title={Bits of History, Words of Advice},
author={Gilad Bracha},
url={https://gbracha.blogspot.com/2020/05/bits-of-history-words-of-advice.html},
year={2020},
urldate={May 2020}
}

@online{Bracha05,
  title  = {Objects as Software Services},
  author = {Gilad Bracha},
  year = {2005},
  url = {http://bracha.org/objectsAsSoftwareServices.pdf},
}

@article{Brand18,
	author = {Brand, Stewart},
	journal = {Journal of Design and Science},
	year = {2018},
	month = jan,
	note = {https://jods.mitpress.mit.edu/pub/issue3-brand},
	publisher = {},
	title = {Pace {Layering}: How {Complex} {Systems} {Learn} and {Keep} {Learning}},
}

@book{Brand95,
  title={How buildings learn: What happens after they're built},
  author={Brand, Stewart},
  year={1995},
  publisher={Penguin}
}

@inproceedings{Burnett14,
  author    = {Burnett, Margaret M. and Myers, Brad A.},
  title     = {Future of End-User Software Engineering: Beyond the Silos},
  year      = {2014},
  isbn      = {9781450328654},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2593882.2593896},
  doi       = {10.1145/2593882.2593896},
  booktitle = {Future of Software Engineering Proceedings},
  pages     = {201–211},
  numpages  = {11},
  keywords  = {End-user software engineering (EUSE), end-user development},
  location  = {Hyderabad, India},
  series    = {FOSE 2014}
}

@online{Cambria,
title={Project Cambria: Translate your data with lenses},
author={Geoffrey Litt and Peter van Hardenberg and Henry Orion},
url={https://www.inkandswitch.com/cambria.html},
year={2020},
urldate={Oct 2020}
}

@InProceedings{Cascade,
title                = {Cascade: A meta-language for change, cause and effect},
author               = {van Rozen, Riemer},
booktitle            = {LIVE workshop at SPLASH'22},
year                 = 2022,
month                = nov
}

@inproceedings{Crichton2021,
  author = {Crichton, Will},
  title = {A New Medium for Communicating Research on Programming Languages},
  booktitle = {Proceedings of the HATRA, Splash 2021},
  year = {2021},
  organization = {ACM},
  url = {https://willcrichton.net/nota/},
}

@online{daff,
title={daff},
author={Fitz, Paul},
url={https://paulfitz.github.io/daff/},
year={2021},
urldate={July 2021}
}

@inproceedings{DBLP:conf/pldi/OmarMBVCC21,
  author    = {Cyrus Omar and
               David Moon and
               Andrew Blinn and
               Ian Voysey and
               Nick Collins and
               Ravi Chugh},
  editor    = {Stephen N. Freund and
               Eran Yahav},
  title     = {Filling typed holes with live GUIs},
  booktitle = {{PLDI} '21: 42nd {ACM} {SIGPLAN} International Conference on Programming
               Language Design and Implementation, Virtual Event, Canada, June 20-25,
               20211},
  pages     = {511--525},
  publisher = {{ACM}},
  year      = {2021},
  url       = {https://doi.org/10.1145/3453483.3454059},
  doi       = {10.1145/3453483.3454059},
  timestamp = {Mon, 21 Jun 2021 13:42:02 +0200},
  biburl    = {https://dblp.org/rec/conf/pldi/OmarMBVCC21.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{DBLP:journals/pacmpl/LubinCOC20,
  author    = {Justin Lubin and
               Nick Collins and
               Cyrus Omar and
               Ravi Chugh},
  title     = {Program sketching with live bidirectional evaluation},
  journal   = {Proc. {ACM} Program. Lang.},
  volume    = {4},
  number    = {{ICFP}},
  pages     = {109:1--109:29},
  year      = {2020},
  url       = {https://doi.org/10.1145/3408991},
  doi       = {10.1145/3408991},
  timestamp = {Wed, 17 Feb 2021 08:54:13 +0100},
  biburl    = {https://dblp.org/rec/journals/pacmpl/LubinCOC20.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@online{dbmaestro,
title={DBmaestro: DevOps for Database},
url={https://dbmaestro.com/},
year={2024},
urldate={May 20234}
}


@online{dedupe,
title = {What's the best way to dedupe a table?},
author = {{Stack Overflow}},
url = {https://stackoverflow.com/questions/2230295/whats-the-best-way-to-dedupe-a-table},
urldate = {June 2023},
year = {2023}
}

@incollection{Deutsch64,
  title = {The LISP implementation for the PDP- 1 computer},
  author = {Deutsch, L. Peter and Berkeley, Edmund C.},
  year = {1964},
  pages = {326-375},
  editor = {Berkeley, Edmund C. and Bobrow, Daniel G.},
  booktitle = {The Programming Language LISP: Its Operation and Applications},
  publisher = {MIT Press},
  address = {Cambridge, MA}
}

@article{diSessa86,
  title={Boxer: A reconstructible computational medium},
  author={diSessa, Andrea A. and Abelson, Harold},
  journal={Communications of the ACM},
  volume={29},
  number={9},
  pages={859--868},
  year={1986},
  publisher={ACM New York, NY, USA}
}

@online{dolt,
title={Dolt},
author={DoltHub Inc},
url={https://www.dolthub.com/},
year={2021},
urldate={Jul 2021}
}

@inproceedings{Ellis89,
author = {Ellis, C. A. and Gibbs, S. J.},
title = {Concurrency Control in Groupware Systems},
year = {1989},
isbn = {0897913175},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/67544.66963},
doi = {10.1145/67544.66963},
abstract = {Groupware systems are computer-based systems that support two or more users engaged
in a common task, and that provide an interface to a shared environment. These systems
frequently require fine-granularity sharing of data and fast response times. This
paper distinguishes real-time groupware systems from other multi-user systems and
discusses their concurrency control requirements. An algorithm for concurrency control
in real-time groupware systems is then presented. The advantages of this algorithm
are its simplicity of use and its responsiveness: users can operate directly on the
data without obtaining locks. The algorithm must know some semantics of the operations.
However the algorithm's overall structure is independent of the semantic information,
allowing the algorithm to be adapted to many situations. An example application of
the algorithm to group text editing is given, along with a sketch of its proof of
correctness in this particular case. We note that the behavior desired in many of
these systems is non-serializable.},
booktitle = {Proceedings of the 1989 ACM SIGMOD International Conference on Management of Data},
pages = {399–407},
numpages = {9},
location = {Portland, Oregon, USA},
series = {SIGMOD '89}
}

@book{EMF,
  author = {Dave Steinberg and Frank Budinsky and Marcelo Paternostro and Ed Merks},
  title = {EMF: Eclipse Modeling Framework},
  year = {2008},
  publisher = {Pearson},
  address = {221 River Street, Hoboken, NJ 07030}
}

@online{Envy,
title={Smalltalk Envy FAQ},
author={Vikas Malik},
url={http://www.faqs.org/faqs/smalltalk/ENVY-faq/},
publisher={faqs.org},
year={1997},
urldate={Oct 2020}
}

@article{ERDWEG201524,
title = {Evaluating and comparing language workbenches: Existing results and benchmarks for the future},
journal = {Computer Languages, Systems {\&} Structures},
volume = {44},
pages = {24-47},
year = {2015},
note = {Special issue on the 6th and 7th International Conference on Software Language Engineering (SLE 2013 and SLE 2014)},
issn = {1477-8424},
doi = {https://doi.org/10.1016/j.cl.2015.08.007},
url = {https://www.sciencedirect.com/science/article/pii/S1477842415000573},
author = {Sebastian Erdweg and Tijs {van der Storm} and Markus Völter and Laurence Tratt and Remi Bosman and William R. Cook and Albert Gerritsen and Angelo Hulshout and Steven Kelly and Alex Loh and Gabriël Konat and Pedro J. Molina and Martin Palatnik and Risto Pohjonen and Eugen Schindler and Klemens Schindler and Riccardo Solmi and Vlad Vergu and Eelco Visser and Kevin {van der Vlist} and Guido Wachsmuth and Jimi {van der Woning}},
}

@techreport{FirstClassCopyPaste,
  author      = {Jonathan Edwards},
  title       = {First Class Copy \& Paste},
  institution = {MIT},
  year        = {2006},
  number      = {MIT-CSAIL-TR-2006-037},
  url         = {http://hdl.handle.net/1721.1/32980}
}

@online{Flash,
  title     = {Adobe Flash},
  url       = {https://en.wikipedia.org/wiki/Adobe_Flash},
  author = {Wikimedia Foundation},
  year      = {2021},
  urldate     = {Jul 2021}
}

@article{Foster2007,
  author = {J. Nathan Foster and Michael B. Greenwald and Jonathan T. Moore
                  and Benjamin C. Pierce and Alan Schmitt},
  title = {Combinators for bidirectional tree transformations:
                  {A} linguistic approach to the view-update problem},
  journal = {ACM Transactions on Programming Languages and Systems},
  volume = {29},
  number = {3},
  pages = {17},
  month = may,
  year = {2007},
  publisher = {ACM Press},
  address = {New York, NY, USA},
  conf = {http://www.cis.upenn.edu/~bcpierce/papers/newlenses-popl.pdf},
  slides = {http://www.cis.upenn.edu/~bcpierce/papers/newlenses-popl-slides.pdf},
  full = {http://www.cis.upenn.edu/~bcpierce/papers/lenses-toplas-final.pdf},
  fullappendix = {http://www.cis.upenn.edu/~bcpierce/papers/lenses-toplas-electronic-appendix.pdf},
  doi = {http://portal.acm.org/citation.cfm?doid=1232420.1232424},
  bcp = {Yes},
  plclub = {Yes},
  keys = {harmony}
}

@online{Gemstone,
title={Gemstone Programmer's Guide: Class versions and Instance Migration},
author={GemTalk},
url={https://downloads.gemtalksystems.com/docs/GemStone64/3.2.x/GS64-ProgGuide-3.2/10-ClassHistory.htm},
year={2015}
}

@article{gitless,
  author     = {De Rosso, Santiago Perez and Jackson, Daniel},
  title      = {Purposes, Concepts, Misfits, and a Redesign of Git},
  year       = {2016},
  issue_date = {October 2016},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {51},
  number     = {10},
  issn       = {0362-1340},
  url        = {https://doi.org/10.1145/3022671.2984018},
  doi        = {10.1145/3022671.2984018},
  abstract   = { Git is a widely used version control system that is powerful but complicated. Its
complexity may not be an inevitable consequence of its power but rather evidence of
flaws in its design. To explore this hypothesis, we analyzed the design of Git using
a theory that identifies concepts, purposes, and misfits. Some well-known difficulties
with Git are described, and explained as misfits in which underlying concepts fail
to meet their intended purpose. Based on this analysis, we designed a reworking of
Git (called Gitless) that attempts to remedy these flaws.  To correlate misfits with
issues reported by users, we conducted a study of Stack Overflow questions. And to
determine whether users experienced fewer complications using Gitless in place of
Git, we conducted a small user study. Results suggest our approach can be profitable
in identifying, analyzing, and fixing design problems. },
  journal    = {SIGPLAN Not.},
  month      = oct,
  pages      = {292–310},
  numpages   = {19},
  keywords   = {design, concepts, usability, concept design, software design, Git, version control}
}

@book{Goldberg80,
author = {Goldberg, Adele},
title = {SMALLTALK-80:  The Interactive Programming Environment},
year = {1984},
isbn = {0201113724},
publisher = {Addison-Wesley Longman Publishing Co., Inc.},
address = {USA}
}

@book{Goodman87,
  title={The Complete HyperCard Handbook},
  author={Goodman, D. and Atkinson, W.},
  isbn={9780553343915},
  lccn={87201799},
  series={Bantam books},
  year={1987},
  publisher={Bantam Books},
  address={USA}
}

@online{Hammant17,
title={Smalltalk Envy},
author={Paul Hammant},
url={https://paulhammant.com/2017/09/01/smalltalk-envy/},
year={2017},
urldate={May 2024}
}

@phdthesis{Hancock03,
  author = {C. Hancock and M. Resnick},
  title  = {Real-time programming and the big ideas of computational literacy},
  year   = {2003},
  school  = {Massachusetts Institute of Technology},
  url = {https://dspace.mit.edu/handle/1721.1/61549}
}

@inproceedings{Hazelnut17,
  author    = {Cyrus Omar and Ian Voysey and Michael Hilton and Jonathan Aldrich and Matthew A. Hammer},
  title     = {{Hazelnut: A Bidirectionally Typed Structure Editor Calculus}},
  booktitle = {44th {ACM} {SIGPLAN} Symposium on Principles of Programming Languages ({POPL} 2017)},
  year      = {2017}
}

@article{HazelnutLive19,
  author    = {Cyrus Omar and Ian Voysey and Ravi Chugh and Matthew A. Hammer},
  title     = {Live Functional Programming with Typed Holes},
  journal   = {{PACMPL}},
  volume    = {3},
  number    = {{POPL}},
  _pages     = {14:1--14:28},
  year      = {2019},
  url       = {http://doi.acm.org/10.1145/3290327},
  doi       = {10.1145/3290327},
}

@inproceedings{Heer2023,
  title={Living Papers: A Language Toolkit for Augmented Scholarly Communication},
  author={Heer, Jeffrey and Conlen, Matthew and Devireddy, Vishal and Nguyen, Tu and Horowitz, Joshua},
  booktitle={Proceedings of the 36th Annual ACM Symposium on User Interface Software and Technology},
  pages={1--13},
  year={2023}
}

@inproceedings{Hempel18,
author = {Hempel, Brian and Lubin, Justin and Lu, Grace and Chugh, Ravi},
title = {Deuce: A Lightweight User Interface for Structured Editing},
year = {2018},
isbn = {9781450356381},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3180155.3180165},
doi = {10.1145/3180155.3180165},
booktitle = {Proceedings of the 40th International Conference on Software Engineering},
pages = {654–664},
numpages = {11},
keywords = {structured editing, direct manipulation, refactoring},
location = {Gothenburg, Sweden},
series = {ICSE '18}
}

@inbook{intentional,
author = {Czarnecki, Krzysztof and Eisenecker, Ulrich W.},
title = {Generative Programming: Methods, Tools, and Applications},
chapter={11},
year = {2000},
isbn = {0201309777},
publisher = {ACM Press/Addison-Wesley Publishing Co.},
address = {USA}
}

@inbook{Kery17,
  author    = {Kery, Mary Beth and Horvath, Amber and Myers, Brad},
  title     = {Variolite: Supporting Exploratory Programming by Data Scientists},
  year      = {2017},
  isbn      = {9781450346559},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3025453.3025626},
  abstract  = {How do people ideate through code? Using semi-structured interviews and a survey,
we studied data scientists who program, often with small scripts, to experiment with
data. These studies show that data scientists frequently code new analysis ideas by
building off of their code from a previous idea. They often rely on informal versioning
interactions like copying code, keeping unused code, and commenting out code to repurpose
older analysis code while attempting to keep those older analyses intact. Unlike conventional
version control, these informal practices allow for fast versioning of any size code
snippet, and quick comparisons by interchanging which versions are run. However, data
scientists must maintain a strong mental map of their code in order to distinguish
versions, leading to errors and confusion. We explore the needs for improving version
control tools for exploratory tasks, and demonstrate a tool for lightweight local
versioning, called Variolite, which programmers found usable and desirable in a preliminary
usability study.},
  booktitle = {Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems},
  pages     = {1265–1276},
  numpages  = {12}
}

@inproceedings{Khanna07,
  abstract  = {The diff3 algorithm is widely considered the gold standard for merging uncoordinated changes to list-structured data such as text files. Surprisingly, its fundamental properties have never been studied in depth.},
  address   = {Berlin, Heidelberg},
  author    = {Khanna, Sanjeev and Kunal, Keshav and Pierce, Benjamin C.},
  booktitle = {FSTTCS 2007: Foundations of Software Technology and Theoretical Computer Science},
  editor    = {Arvind, V. and Prasad, Sanjiva},
  isbn      = {978-3-540-77050-3},
  pages     = {485--496},
  publisher = {Springer Berlin Heidelberg},
  title     = {A Formal Investigation of Diff3},
  year      = {2007}
}

@article{Kleppmann21,
  author  = {Kleppmann, Martin and Mulligan, Dominic P. and Gomes, Victor B. F. and Beresford, Alastair},
  journal = {IEEE Transactions on Parallel and Distributed Systems},
  title   = {A highly-available move operation for replicated trees},
  year    = {2021},
  volume  = {},
  number  = {},
  pages   = {1-1},
  doi     = {10.1109/TPDS.2021.3118603}
}


@inproceedings{Klokmose17,
author = {R\"{a}dle, Roman and Nouwens, Midas and Antonsen, Kristian and Eagan, James R. and Klokmose, Clemens N.},
title = {Codestrates: Literate Computing with Webstrates},
year = {2017},
isbn = {9781450349819},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3126594.3126642},
doi = {10.1145/3126594.3126642},
abstract = {We introduce Codestrates, a literate computing approach to developing interactive
software. Codestrates blurs the distinction between the use and development of applications.
It builds on the literate computing approach, commonly found in interactive notebooks
such as Jupyter notebook. Literate computing weaves together prose and live computation
in the same document. However, literate computing in interactive notebooks are limited
to computation and it is challenging to extend their user interface, reprogram their
functionality, or develop stand-alone applications. Codestrates builds literate computing
capabilities on top of Webstrates and demonstrates how it can be used for (i) collaborative
interactive notebooks, (ii) extending its functionality from within itself, and (iii)
developing reprogrammable applications.},
booktitle = {Proceedings of the 30th Annual ACM Symposium on User Interface Software and Technology},
pages = {715–725},
numpages = {11},
keywords = {literate computing, interactive notebooks, real-time collaboration, reprogrammable systems, literate programming},
location = {Qu\'{e}bec City, QC, Canada},
series = {UIST '17}
}

@article{Kluyver2016,
  title={Jupyter Notebooks-a publishing format for reproducible computational workflows.},
  author={Kluyver, Thomas and Ragan-Kelley, Benjamin and P{\'e}rez, Fernando and Granger, Brian E and Bussonnier, Matthias and Frederic, Jonathan and Kelley, Kyle and Hamrick, Jessica B and Grout, Jason and Corlay, Sylvain and others},
  journal={Elpub},
  volume={2016},
  pages={87--90},
  year={2016}
}

@inproceedings{Kolling15,
author = {K\"{o}lling, Michael and Brown, Neil C. C. and Altadmri, Amjad},
title = {Frame-Based Editing: Easing the Transition from Blocks to Text-Based Programming},
year = {2015},
isbn = {9781450337533},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2818314.2818331},
doi = {10.1145/2818314.2818331},
abstract = {Block-based programming systems, such as Scratch or Alice, are the most popular environments
for introducing young children to programming. However, mastery of text-based programming
continues to be the educational goal for students who continue to program into their
teenage years and beyond. Transitioning across the significant gap between the two
editing styles presents a difficult challenge in school-level teaching of programming.
We propose a new style of program manipulation to bridge the gap: frame-based editing.
Frame-based editing has the resistance to errors and approachability of block-based
programming while retaining the flexibility and more conventional programming semantics
of text-based programming languages. In this paper, we analyse the issues involved
in the transition from blocks to text and argue that they can be overcome by using
frame-based editing as an intermediate step. A design and implementation of a frame-based
editor is provided.},
booktitle = {Proceedings of the Workshop in Primary and Secondary Computing Education},
pages = {29–38},
numpages = {10},
keywords = {Novice programming, Editing, Frame-based editing},
location = {London, United Kingdom},
series = {WiPSCE '15}
}

@book{lane1998categories,
  title={Categories for the Working Mathematician},
  author={Lane, S.M.},
  isbn={9780387984032},
  lccn={97045229},
  series={Graduate Texts in Mathematics},
  year={1998},
  publisher={Springer New York}
}

@online{liquibase,
title = {Automate database change workflows with Liquibase},
author = {Liquibase},
url = {https://www.liquibase.com},
urldate = {June 2023},
year = {2023}
}

@online{Litt2023,
  title={Potluck: Dynamic documents as personal software},
  author={Litt, Geoffrey and Schoening, Max and Shen, Paul and Sonnentag, Paul},
  url={https://www.inkandswitch.com/potluck/},
  urldate={29 April 2024},
  year={2023}
}

@online{localfirst,
  title = {Local-first software: You own your data, in spite of the cloud},
  author = {Martin Kleppmann and Adam Wiggins and Peter van Hardenberg and Mark McGranaghan},
  year = 2019,
  url = {https://www.inkandswitch.com/local-first/}
}


@ARTICLE {Masinter81,
author = {L. Masinter and W. Teitelman},
journal = {Computer},
title = {The Interlisp Programming Environment},
year = {1981},
volume = {14},
number = {04},
issn = {1558-0814},
pages = {25-33},
keywords = {null},
doi = {10.1109/C-M.1981.220410},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {apr}
}

@book{Molina08,
  author    = {Garcia-Molina, Hector and Ullman, Jeffrey D. and Widom, Jennifer},
  title     = {Database Systems: The Complete Book},
  year      = {2008},
  isbn      = {9780131873254},
  publisher = {Prentice Hall Press},
  address   = {USA},
  edition   = {2},
  abstract  = {This introduction to database systems offers a comprehensive approach, focusing on database design, database use, and implementation of database applications and database management systems. KEY TOPICS: The first half of the book provides in-depth coverage of databases from the point of view of the database designer, user, and application programmer. It covers the latest database standards SQL:1999, SQL/PSM, SQL/CLI, JDBC, ODL, and XML, with broader coverage of SQL than most other texts. The second half of the book covers databases from the point of view of the DBMS implementor, focusing on storage structures, query processing, and transaction management. The book covers the main techniques in these areas with broader coverage of query optimization than most other texts, along with advanced topics including multidimensional and bitmap indexes, distributed transactions, and information integration techniques. Ideal for professionals and students interested in database systems. A basic understanding of algebraic expressions and laws, logic, basic data structure, OOP concepts, and programming environments is implied.}
}

@online{MPS,
title={MPS: The Domain-Specific Language Creator},
author={JetBrains s.r.o.},
url={https://www.jetbrains.com/mps/},
year={2021},
urldate={July 2021}
}

@online{Nextjournal21,
  title = {Nextjournal: The notebook for reproducible research},
  author = {{Nextjournal GmbH}},
  year = {2021},
  url = {https://nextjournal.com/},
  urldate={29 April 2024}
}

 @online{noms,
title={Noms},
url={https://github.com/attic-labs/noms},
author={Attic-Labs},
year={2021},
urldate={Jul 2021}
}


@online{notion,
  title = {Notion: Write, plan, organize, play},
  author = {{Notion Labs Inc.}},
  year = {2024},
  url = {https://notion.so},
  urldate = {29 April 2024}
}

@inproceedings{Oster06,
  author    = {Oster, Gerald and Molli, Pascal and Urso, Pascal and Imine, Abdessamad},
  booktitle = {2006 International Conference on Collaborative Computing: Networking, Applications and Worksharing},
  title     = {Tombstone Transformation Functions for Ensuring Consistency in Collaborative Editing Systems},
  year      = {2006},
  volume    = {},
  number    = {},
  pages     = {1-10},
  doi       = {10.1109/COLCOM.2006.361867}
}


@article{PatchTheory,
title={A Categorical Theory of Patches},
volume={298},
ISSN={1571-0661},
url={http://dx.doi.org/10.1016/j.entcs.2013.09.018},
DOI={10.1016/j.entcs.2013.09.018},
journal={Electronic Notes in Theoretical Computer Science},
publisher={Elsevier BV},
author={Mimram, Samuel and Di Giusto, Cinzia},
year={2013},
month={Nov},
pages={283–307}
}

@online{Pijul,
  title     = {Pijul, a sound and fast distributed version control system based on a mathematical theory of asynchronous work},
  url       = {https://pijul.org/},
  year      = {2021},
  urldate     = {Oct 2021}
}

@book{ProGit,
  author    = {Chacon, Scott and Straub, Ben},
  title     = {Pro Git},
  year      = {2014},
  isbn      = {1484200772},
  publisher = {Apress},
  address   = {USA},
  edition   = {2nd},
  abstract  = {Pro Git (Second Edition) is your fully-updated guide to Git and its usage in the modern
world. Git has come a long way since it was first developed by Linus Torvalds for
Linux kernel development. It has taken the open source world by storm since its inception
in 2005, and this book teaches you how to use it like a pro. Effective and well-implemented
version control is a necessity for successful web projects, whether large or small.
With this book youll learn how to master the world of distributed version workflow,
use the distributed features of Git to the full, and extend Git to meet your every
need. Written by Git pros Scott Chacon and Ben Straub, Pro Git (Second Edition) builds
on the hugely successful first edition, and is now fully updated for Git version 2.0,
as well as including an indispensable chapter on GitHub. Its the best book for all
your Git needs. What youll learn Effectively use Git, either as a programmer or a
project leader Become a fluent Git user Master branching, using Git on the server,
and on other systems Integrate Git in your development workflow Migrate programming
projects from other SCMs to Git Extend Git for your personal project needs Effectively
use GitHub Who this book is for This book is for all open source developers: you are
bound to encounter Git somewhere in the course of your working life. Proprietary software
developers will appreciate Gits enormous scalability, since it is used for the Linux
project, which comprises thousands of developers and testers.}
}

@online{RailsMigrations,
author={Rails},
title={Ruby on Rails Guides: Migrations},
url={https://guides.rubyonrails.org/v3.2/migrations.html},
year={2021},
urldate={Jul 2021}
}

@article{Resnick09,
author = {Resnick, Mitchel and Maloney, John and Monroy-Hern\'{a}ndez, Andr\'{e}s and Rusk, Natalie and Eastmond, Evelyn and Brennan, Karen and Millner, Amon and Rosenbaum, Eric and Silver, Jay and Silverman, Brian and Kafai, Yasmin},
title = {Scratch: Programming for All},
year = {2009},
issue_date = {November 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {52},
number = {11},
issn = {0001-0782},
url = {https://doi.org/10.1145/1592761.1592779},
doi = {10.1145/1592761.1592779},
abstract = {"Digital fluency" should mean designing, creating, and remixing, not just browsing,
chatting, and interacting.},
journal = {Commun. ACM},
month = nov,
pages = {60–67},
numpages = {8}
}

@inproceedings{Ressel96,
  author    = {Ressel, Matthias and Nitsche-Ruhland, Doris and Gunzenh\"{a}user, Rul},
  title     = {An Integrating, Transformation-Oriented Approach to Concurrency Control and Undo in Group Editors},
  year      = {1996},
  isbn      = {0897917650},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/240080.240305},
  doi       = {10.1145/240080.240305},
  booktitle = {Proceedings of the 1996 ACM Conference on Computer Supported Cooperative Work},
  pages     = {288–297},
  numpages  = {10},
  keywords  = {groupware, interaction model, concurrency control, operation transformation, group editors, group undo},
  location  = {Boston, Massachusetts, USA},
  series    = {CSCW '96}
}

@inproceedings{RuntimeConstraint,
author = {Tikhonova, Ulyana and Stoel, Jouke and van der Storm, Tijs and Degueule, Thomas},
title = {Constraint-Based Run-Time State Migration for Live Modeling},
year = {2018},
isbn = {9781450360296},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3276604.3276611},
doi = {10.1145/3276604.3276611},
abstract = {Live modeling enables modelers to incrementally update models as they are running and get immediate feedback about the impact of their changes. Changes introduced in a model may trigger inconsistencies between the model and its run-time state (e.g., deleting the current state in a statemachine); effectively requiring to migrate the run-time state to comply with the updated model. In this paper, we introduce an approach that enables to automatically migrate such run-time state based on declarative constraints defined by the language designer. We illustrate the approach using Nextep, a meta-modeling language for defining invariants and migration constraints on run-time state models. When a model changes, Nextep employs model finding techniques, backed by a solver, to automatically infer a new run-time model that satisfies the declared constraints. We apply Nextep to define migration strategies for two DSLs, and report on its expressiveness and performance.},
booktitle = {Proceedings of the 11th ACM SIGPLAN International Conference on Software Language Engineering},
pages = {108–120},
numpages = {13},
keywords = {relational model finding, DSL, live modeling, run-time state migration},
location = {Boston, MA, USA},
series = {SLE 2018}
}

@article{Sandewall78,
author = {Sandewall, Erik},
title = {Programming in an Interactive Environment: The ``Lisp'' Experience},
year = {1978},
issue_date = {March 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {10},
number = {1},
issn = {0360-0300},
url = {https://doi.org/10.1145/356715.356719},
doi = {10.1145/356715.356719},
journal = {ACM Comput. Surv.},
month = mar,
pages = {35–71},
numpages = {37}
}

@inproceedings{SemanticDeltas,
  author       = {Tijs van der Storm},
  editor       = {Brian Burg and
                  Adrian Kuhn and
                  Chris Parnin},
  title        = {Semantic deltas for live {DSL} environments},
  booktitle    = {Proceedings of the 1st International Workshop on Live Programming,
                  {LIVE} 2013, San Francisco, California, USA, May 19, 2013},
  pages        = {35--38},
  publisher    = {{IEEE} Computer Society},
  year         = {2013},
  url          = {https://doi.org/10.1109/LIVE.2013.6617347},
  doi          = {10.1109/LIVE.2013.6617347},
  timestamp    = {Thu, 23 Mar 2023 23:58:12 +0100},
  biburl       = {https://dblp.org/rec/conf/icse/Storm13.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}



@techreport{Shapiro11,
  TITLE = {{A comprehensive study of Convergent and Commutative Replicated Data Types}},
  AUTHOR = {Shapiro, Marc and Pregui{\c c}a, Nuno and Baquero, Carlos and Zawirski, Marek},
  URL = {https://hal.inria.fr/inria-00555588},
  TYPE = {Research Report},
  NUMBER = {RR-7506},
  PAGES = {50},
  INSTITUTION = {{Inria -- Centre Paris-Rocquencourt ; INRIA}},
  YEAR = {2011},
  MONTH = Jan,
  KEYWORDS = {eventual consistency ; optimistic replication ; replicated data types ; distributed algorithms ; distributed systems ; Data replication ; commutative operations},
  PDF = {https://hal.inria.fr/inria-00555588/file/techreport.pdf},
  HAL_ID = {inria-00555588},
  HAL_VERSION = {v1},
}
@inproceedings{Subtext05,
  author    = {Edwards, Jonathan},
  title     = {Subtext: Uncovering the Simplicity of Programming},
  year      = {2005},
  isbn      = {1595930310},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {http://www.subtext-lang.org/OOPSLA05.pdf},
  abstract  = {Representing programs as text strings makes programming harder then it has to be.
The source text of a program is far removed from its behavior. Bridging this conceptual
gulf is what makes programming so inhumanly difficult -- we are not compilers. Subtext
is a new medium in which the representation of a program is the same thing as its
execution. Like a spreadsheet, a program is visible and alive, constantly executing
even as it is edited. Program edits are coherent semantic transformations.The essence
of this new medium is copying. Programs are constructed by copying and executed by
copy flow: the projection of changes through copies. The simple idea of copying develops
into a rich theory of higher-order continual copying of trees. Notably absent are
symbolic names, the workhorse of textual notation, replaced by immediately-bound explicit
relationships. Subtext unifies traditionally distinct programming tools and concepts,
and enables some novel ones. Ancestral structures are a new primitive data type that
combines the features of lists and records, along with unproblematic multiple inheritance.
Adaptive conditionals use first-class program edits to dynamically adapt behavior.A
prototype implementation shows promise, but calls for much further research. Subtext
suggests that we can make programming radically easier, if we are willing to be radical.},
  booktitle = {Proceedings of the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications},
  pages     = {505–518},
  numpages  = {14},
  keywords  = {visual programming, prototypes, non-textual programming, copying},
  location  = {San Diego, CA, USA},
  series    = {OOPSLA '05}
}


@inproceedings{Sun98CSCW,
author = {Sun, Chengzheng and Ellis, Clarence},
title = {Operational Transformation in Real-Time Group Editors: Issues, Algorithms, and Achievements},
year = {1998},
isbn = {1581130090},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/289444.289469},
doi = {10.1145/289444.289469},
booktitle = {Proceedings of the 1998 ACM Conference on Computer Supported Cooperative Work},
pages = {59–68},
numpages = {10},
keywords = {intention preservation, operational transformation, groupware, group editors, causality preservation, distributed computing, convergence, consistency maintenance},
location = {Seattle, Washington, USA},
series = {CSCW '98}
}

@article{Sun98TCHI,
  author     = {Sun, Chengzheng and Jia, Xiaohua and Zhang, Yanchun and Yang, Yun and Chen, David},
  title      = {Achieving Convergence, Causality Preservation, and Intention Preservation in Real-Time Cooperative Editing Systems},
  year       = {1998},
  issue_date = {March 1998},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {5},
  number     = {1},
  issn       = {1073-0516},
  url        = {https://doi.org/10.1145/274444.274447},
  doi        = {10.1145/274444.274447},
  abstract   = {Real-time cooperative editing systems allow multiple users to view and edit the same
text/graphic/image/multimedia document at the same time for multiple sites connected
by communication networks. Consistency maintenance is one of the most significant
challenges in designing and implementing real-time cooperative editing systems. In
this article, a consistency model, with properties of convergence, causality preservation,
and intention preservation, is proposed as a framework for consistency maintenance
in real-time cooperative editing systems. Moreover, an integrated set of schemes and
algorithms, which support the proposed consistency model, are devised and discussed
in detail. In particular, we have contributed (1) a novel generic operation transformation
control algorithm for achieving intention preservation in combination with schemes
for achieving convergence and causality preservation and (2) a pair of reversible
inclusion and exclusion transformation algorithms for stringwise operations for text
editing. An Internet-based prototype system has been built to test the feasibility
of the proposed schemes and algorithms },
  journal    = {ACM Trans. Comput.-Hum. Interact.},
  month      = mar,
  pages      = {63–108},
  numpages   = {46},
  keywords   = {convergence, computer-supported cooperative work, intention preservation, consistency maintenance, operational transformation, cooperative editing, causality preservation, REDUCE, groupware systems}
}


@inproceedings{Swierstra14,
  author    = {Swierstra, Wouter and L\"{o}h, Andres},
  title     = {The Semantics of Version Control},
  year      = {2014},
  isbn      = {9781450332101},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2661136.2661137},
  doi       = {10.1145/2661136.2661137},
  abstract  = {As software becomes increasingly complex, software configuration management is becoming
ever more important. This paper shows how logics for reasoning about mutable state,
such as separation logic, can also be used to give semantics for version control systems.
By applying these ideas from the programming language research community, developers
may reason formally about the broader software development process.},
  booktitle = {Proceedings of the 2014 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming &amp; Software},
  pages     = {43–54},
  numpages  = {12},
  keywords  = {separation logic, semantics, hoare logic, version control},
  location  = {Portland, Oregon, USA},
  series    = {Onward! 2014}
}

@article{tanimoto90,
  author     = {Tanimoto, Steven L.},
  title      = {VIVA: A Visual Language for Image Processing},
  year       = {1990},
  issue_date = {June, 1990},
  publisher  = {Academic Press, Inc.},
  address    = {USA},
  volume     = {1},
  number     = {2},
  issn       = {1045-926X},
  url        = {https://doi.org/10.1016/S1045-926X(05)80012-6},
  doi        = {10.1016/S1045-926X(05)80012-6},
  journal    = {J. Vis. Lang. Comput.},
  month      = jun,
  pages      = {127–139},
  numpages   = {13}
}

@article{Teitelbaum81,
author = {Teitelbaum, Tim and Reps, Thomas},
title = {The Cornell Program Synthesizer: A Syntax-Directed Programming Environment},
year = {1981},
issue_date = {Sept. 1981},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {9},
issn = {0001-0782},
url = {https://doi.org/10.1145/358746.358755},
doi = {10.1145/358746.358755},
abstract = {Programs are not text; they are hierarchical compositions of computational structures
and should be edited, executed, and debugged in an environment that consistently acknowledges
and reinforces this viewpoint. The Cornell Program Synthesizer demands a structural
perspective at all stages of program development. Its separate features are unified
by a common foundation: a grammar for the programming language. Its full-screen derivation-tree
editor and syntax-directed diagnostic interpreter combine to make the Synthesizer
a powerful and responsive interactive programming tool.},
journal = {Commun. ACM},
month = sep,
pages = {563–573},
numpages = {11},
keywords = {programming environment, source language debugger, syntax-directed editor, template, diagnostic interpreter, program development system}
}

@article{Tranquility,
author = {Vandewoude, Yves and Ebraert, Peter and Berbers, Yolande and D'Hondt, Theo},
title = {Tranquility: A Low Disruptive Alternative to Quiescence for Ensuring Safe Dynamic Updates},
year = {2007},
issue_date = {December 2007},
publisher = {IEEE Press},
volume = {33},
number = {12},
issn = {0098-5589},
url = {https://doi.org/10.1109/TSE.2007.70733},
doi = {10.1109/TSE.2007.70733},
abstract = {This paper revisits a problem that was identified by Kramer and Magee: placing a system in a consistent state before and after runtime changes. We show that their notion of quiescence as a necessary and sufficient condition for safe runtime changes is too strict and results in a significant disruption in the application being updated. In this paper, we introduce a weaker condition: tranquility. We show that tranquility is easier to obtain and less disruptive for the running application but still a sufficient condition to ensure application consistency. We present an implementation of our approach on a component middleware platform and experimentally verify the validity and practical applicability of our approach using data retrieved from a case study.},
journal = {IEEE Trans. Softw. Eng.},
month = dec,
pages = {856–868},
numpages = {13},
keywords = {Distributed objects, components, Application-aware adaptation, containers, Componentware}
}



@article{Trenouth91,
  author   = {Trenouth, J.},
  title    = {{A Survey of Exploratory Software Development}},
  journal  = {The Computer Journal},
  volume   = {34},
  number   = {2},
  pages    = {153-163},
  year     = {1991},
  month    = {01},
  abstract = {{Exploratory software development is an important style of software development that has a markedly different flavour from conventional software engineering methodologies. Originally used in artificial intelligence programming, it has much in common with both rapid prototyping and software maintenance. This paper surveys the area, by examining the methodology, technology, and related issues.}},
  issn     = {0010-4620},
  doi      = {10.1093/comjnl/34.2.153},
  url      = {https://doi.org/10.1093/comjnl/34.2.153},
  eprint   = {https://academic.oup.com/comjnl/article-pdf/34/2/153/1400604/340153.pdf}
}


@article{vanRozen19,
	abstract = {Live programming is a style of development characterized by incremental change and immediate feedback. Instead of long edit-compile cycles, developers modify a running program by changing its source code, receiving immediate feedback as it instantly adapts in response. In this paper, we propose an approach to bridge the gap between running programs and textual domain-specific languages (DSLs). The first step of our approach consists of applying a novel model differencing algorithm, tmdiff, to the textual DSL code. By leveraging ordinary text differencing and origin tracking, tmdiff produces deltas defined in terms of the metamodel of a language. In the second step of our approach, the model deltas are applied at run time to update a running system, without having to restart it. Since the model deltas are derived from the static source code of the program, they are unaware of any run-time state maintained during model execution. We therefore propose a generic, dynamic patch architecture, rmpatch, which can be customized to cater for domain-specific state migration. We illustrate rmpatch in a case study of a live programming environment for a simple DSL implemented in Rascal for simultaneously defining and executing state machines.},
	author = {van Rozen, Riemer and van der Storm, Tijs},
	date = {2019/02/01},
	date-added = {2023-06-12 14:15:18 -0700},
	date-modified = {2023-06-12 14:16:30 -0700},
	doi = {10.1007/s10270-017-0608-7},
	id = {van Rozen2019},
	isbn = {1619-1374},
	journal = {Software \& Systems Modeling},
	number = {1},
	pages = {195--212},
	title = {Toward live domain-specific languages},
	url = {https://doi.org/10.1007/s10270-017-0608-7},
	volume = {18},
	year = {2019},
	bdsk-url-1 = {https://doi.org/10.1007/s10270-017-0608-7}
 }

@online{planetscale,
title = {Database branching: three-way merge for schema changes},
author = {PlanetScale Inc},
url = {https://planetscale.com/blog/database-branching-three-way-merge-schema-changes},
urldate = {May 2024},
year = 2024
}

@online{edgedb,
title = {Schema migrations},
author = {EdgeDB Inc},
url = {https://docs.edgedb.com/guides/migrations},
urldate = {May 2024},
year = 2024
}

@online{sqliteDatatypes,
title = {Datatypes In SQLite},
author = {sqlite.org},
url = {https://www.sqlite.org/datatype3.html},
urldate = {May 2024},
year = 2024
}

@online{mysqlAlterTable,
title = {MYSql ALTER TABLE Statement},
author = {Oracle Inc},
url = {https://dev.mysql.com/doc/refman/8.0/en/alter-table.html},
urldate = {May 2024},
year = 2024
}

